Multithreading code :
    By extending Thread class :
    class Multi extends Thread{  
        public void run(){  
        System.out.println("thread is running...");  
        }  
        public static void main(String args[]){  
        Multi t1=new Multi();  
        t1.start();  
            }  
        }  

    By extending runnable interface :
        class Multi3 implements Runnable{  
        public void run(){  
        System.out.println("thread is running...");  
        }  
  
        public static void main(String args[]){  
        Multi3 m1=new Multi3();  
        Thread t1 =new Thread(m1);  
        t1.start();  
            }  
        }   

Inner Classes code :
      class TestMemberOuter1{  
        private int data=30;  
        class Inner{  
        void msg(){System.out.println("data is "+data);}  
        }  
        public static void main(String args[]){  
        TestMemberOuter1 obj=new TestMemberOuter1();  
        TestMemberOuter1.Inner in=obj.new Inner();  
        in.msg();  
            }  
        }

Enums code :
    class EnumExample1{  
        //defining enum within class  
        public enum Season { WINTER, SPRING, SUMMER, FALL }  
        //creating the main method  
        public static void main(String[] args) {  
        //printing all enum  
        for (Season s : Season.values()){  
        System.out.println(s);  
        }  
        System.out.println("Value of WINTER is: "+Season.valueOf("WINTER"));  
        System.out.println("Index of WINTER is: "+Season.valueOf("WINTER").ordinal());  
        System.out.println("Index of SUMMER is: "+Season.valueOf("SUMMER").ordinal());  
  
        }}

Generics code :
    import java.util.*;  
    class TestGenerics1{  
        public static void main(String args[]){  
        ArrayList<String> list=new ArrayList<String>();  
        list.add("Panki");  
        list.add("Neha");  
        //list.add(32);//compile time error  
  
        String s=list.get(1);//type casting is not required  
        System.out.println("element is: "+s);  
  
        Iterator<String> itr=list.iterator();  
        while(itr.hasNext()){  
        System.out.println(itr.next());  
            }  
            }  
        }      

ArrayList code :
    import java.util.*;  
    class TestJavaCollection1{  
        public static void main(String args[]){  
        ArrayList<String> list=new ArrayList<String>();//Creating arraylist  
        list.add("Pankaj");//Adding object in arraylist  
        list.add("Sayan");  
        list.add("Navneet");  
        list.add("Alka");  
        //Traversing list through Iterator  
        Iterator itr=list.iterator();  
        while(itr.hasNext()){  
        System.out.println(itr.next());  
            }  
            }  
        }  
TreeSet code :
    import java.util.*;  
    public class TestJavaCollection9{  
        public static void main(String args[]){  
        //Creating and adding elements  
        TreeSet<String> set=new TreeSet<String>();  
        set.add("Ravi");  
        set.add("Vijay");  
        set.add("Ravi");  
        set.add("Ajay");  
        //traversing elements  
        Iterator<String> itr=set.iterator();  
        while(itr.hasNext()){  
        System.out.println(itr.next());  
            }  
            }  
        }  


TreeMap code :
    import java.util.*;  
    class TreeMap1{  
        public static void main(String args[]){  
        TreeMap<Integer,String> map=new TreeMap<Integer,String>();    
        map.put(100,"Pankaj");    
        map.put(102,"Sankalp");    
        map.put(101,"Aarti");    
        map.put(103,"Sneha");    
        
        for(Map.Entry m:map.entrySet()){    
        System.out.println(m.getKey()+" "+m.getValue());    
            }    
            }  
        }  

ArrayDequeue code :
    import java.util.*;  
    public class TestJavaCollection6{  
        public static void main(String[] args) {  
        //Creating Deque and adding elements  
        Deque<String> deque = new ArrayDeque<String>();  
        deque.add("Gautam");  
        deque.add("Karan");  
        deque.add("Ajay");  
        //Traversing elements  
        for (String str : deque) {  
        System.out.println(str);  
            }  
            }  
        }

Streams code:
    package com.javainternityday4;
    import java.util.stream.Stream;
    public class StreamDemo{
        public static void main(String[]args)
        {
            Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
            stream.forEach(p-> System.out.println(p));
        }
    }

    
List code : 
    package com.javainternityday4;
    import java.util.stream.Stream;
    import java.util.List;
    import java.util.ArrayList;
    public class StreamDemo2 {

	public static void main(String[] args) {
		List<String> list = new ArrayList<>(); {
			list.add("Pankaj");
			list.add("Sayan");
			list.add("Ssankalp");
			
			Stream<String> stream = list.stream();
			stream.forEach(p-> System.out.println(p));
		}
	}

}

Stream using filter method code:
    package com.javainternityday4;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Stream;

    public class StreamDemo3 {

	public static void main(String[] args) {
		List<Integer> list = new ArrayList<>();{
			list.add(1);
			list.add(2);
			list.add(3);
			list.add(11);
			list.add(22);
			list.add(33);
			
			list.stream()
			.filter(num->num>10)
			.forEach(System.out::println);
			 System.out.println("Original list is not modified");
			 list.stream().
			 forEach(System.out::println);
		}
	}

}



    